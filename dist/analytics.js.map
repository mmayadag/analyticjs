{
  "version": 3,
  "sources": ["../src/metrics/measureMetrics/getDomLoad.ts", "../src/metrics/measureMetrics/getNetworkingEvents.ts", "../src/metrics/measureMetrics/getTTFB.ts", "../src/metrics/measureMetrics/getFCP.ts", "../src/metrics/measureMetrics/getWindowLoad.ts", "../src/metrics/getMetrics.ts", "../src/metrics/postMetrics.ts", "../src/index.ts"],
  "sourcesContent": ["export const getDomLoad = (navigationEntry): number => navigationEntry.domComplete;", "import { ResourceFilesType } from '../types';\n\nexport const getNetworkingEvents = () => {\n\n    // Get all resources entries\n    const resourceListEntries: PerformanceEntryList = performance.getEntriesByType(\"resource\");\n\n    // Filter resources - Network timings for Document, Image, Font, JS, and CSS\n    let initiatorTypes: string[] = ['css', 'script', 'link', 'img', 'subdocument', 'other']\n\n    const resources: ResourceFilesType = [];\n    resourceListEntries.forEach((resource: any) => {\n        const { name, initiatorType, duration, transferSize } = resource;\n        if (initiatorTypes.indexOf(initiatorType) == -1) {\n            return;\n        }\n        resources.push({\n            url: name,\n            type: initiatorType,\n            duration: duration,\n            transferSize: transferSize\n        });\n    });\n    return resources;\n}", "export const getTTFB = (navigationEntry): number => {\n    return navigationEntry.responseStart - navigationEntry.requestStart;\n}", "export const getFCP = (performance: PerformanceEntry | any): number => {\n    const firstContentfulPaintEntry = performance.getEntriesByType(\"paint\")[0];\n    return firstContentfulPaintEntry ? firstContentfulPaintEntry.startTime : 0;\n}", "export const getWindowLoad = (navigationEntry): number => navigationEntry.loadEventEnd - navigationEntry.loadEventStart", "import { getFCP, getTTFB, getNetworkingEvents, getDomLoad, getWindowLoad } from './measureMetrics'\nimport { MetricData } from './types';\n\nexport const getMetrics = (): MetricData => {\n    const { performance } = window;\n    const navigationEntry = performance.getEntriesByType(\"navigation\")[0];\n\n    return {\n        ttfb: getTTFB(navigationEntry),\n        fcp: getFCP(performance),\n        domComplete: getDomLoad(navigationEntry),\n        windowLoadEvent: getWindowLoad(navigationEntry),\n        resources: getNetworkingEvents()\n    };\n}\n", "import { MetricResourcesType } from './types';\nexport const postMetrics = async (metrics) => {\n    const api = 'http://localhost:8080/api/v1/metrics' //process.env.API_METRICS_URL\n\n    const metricsData: MetricResourcesType = {\n        ...metrics,\n        user_agent: navigator.userAgent,\n        url: window.location.href\n    };\n\n    let request = await fetch(`${api}`, {\n        method: 'post',\n        mode: 'cors', // no-cors, *cors, same-origin\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(metricsData)\n    })\n\n    /*\n    * Becon send method\n    * needs cors allow\n      let headers = {\n          type: 'application/json'\n      };\n      let metricsData = {\n          ...metrics,\n          resources: [\"test\"],\n          url: window.location.href\n      }\n    let blob = new Blob([JSON.stringify(metricsData)], headers);\n      navigator.sendBeacon(api, blob); // TODO: Catch exeptions\n\n      */\n};", "/*!\n * Analaytics.js\n * Performance Analaytics javascript file. This js collects web vitals & web performance data.\n * https://mayadag.com/\n * \n * Released under the MIT license\n *\n * Date: 2021-03-27T10:59Z\n */\nimport { getMetrics, postMetrics } from './metrics/index';\n\nconst Perfanalytics = () => {\n    // initialise\n    window.addEventListener('load', () => {\n        setTimeout(() => {\n            const metrics = getMetrics();\n            postMetrics(metrics);\n        })\n    }, false);\n};\n\nPerfanalytics();"],
  "mappings": ";;AAAO,MAAM,aAAa,CAAC,oBAA4B,gBAAgB;;;ACEhE,MAAM,sBAAsB,MAAM;AAGrC,UAAM,sBAA4C,YAAY,iBAAiB;AAG/E,QAAI,iBAA2B,CAAC,OAAO,UAAU,QAAQ,OAAO,eAAe;AAE/E,UAAM,YAA+B;AACrC,wBAAoB,QAAQ,CAAC,aAAkB;AAC3C,YAAM,CAAE,MAAM,eAAe,UAAU,gBAAiB;AACxD,UAAI,eAAe,QAAQ,kBAAkB,IAAI;AAC7C;AAAA;AAEJ,gBAAU,KAAK;AAAA,QACX,KAAK;AAAA,QACL,MAAM;AAAA,QACN;AAAA,QACA;AAAA;AAAA;AAGR,WAAO;AAAA;;;ACvBJ,MAAM,UAAU,CAAC,oBAA4B;AAChD,WAAO,gBAAgB,gBAAgB,gBAAgB;AAAA;;;ACDpD,MAAM,SAAS,CAAC,iBAAgD;AACnE,UAAM,4BAA4B,aAAY,iBAAiB,SAAS;AACxE,WAAO,4BAA4B,0BAA0B,YAAY;AAAA;;;ACFtE,MAAM,gBAAgB,CAAC,oBAA4B,gBAAgB,eAAe,gBAAgB;;;ACGlG,MAAM,aAAa,MAAkB;AACxC,UAAM,CAAE,6BAAgB;AACxB,UAAM,kBAAkB,aAAY,iBAAiB,cAAc;AAEnE,WAAO;AAAA,MACH,MAAM,QAAQ;AAAA,MACd,KAAK,OAAO;AAAA,MACZ,aAAa,WAAW;AAAA,MACxB,iBAAiB,cAAc;AAAA,MAC/B,WAAW;AAAA;AAAA;;;ACXZ,MAAM,cAAc,OAAO,YAAY;AAC1C,UAAM,MAAM;AAEZ,UAAM,cAAmC;AAAA,SAClC;AAAA,MACH,YAAY,UAAU;AAAA,MACtB,KAAK,OAAO,SAAS;AAAA;AAGzB,QAAI,UAAU,MAAM,MAAM,GAAG,OAAO;AAAA,MAChC,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,QACL,QAAU;AAAA,QACV,gBAAgB;AAAA;AAAA,MAEpB,MAAM,KAAK,UAAU;AAAA;AAAA;;;ACjB7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA,MAAM,gBAAgB,MAAM;AAExB,WAAO,iBAAiB,QAAQ,MAAM;AAClC,iBAAW,MAAM;AACb,cAAM,UAAU;AAChB,oBAAY;AAAA;AAAA,OAEjB;AAAA;AAGP;",
  "names": []
}
